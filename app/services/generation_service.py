import json
import traceback
import logging
from functools import lru_cache
from jinja2 import Environment, FileSystemLoader
from fastapi import HTTPException

from app.services.huggingface_service import get_hugchat
from app.services.external_sources import aggregated_search
from app.services.feedback_service import get_feedback_summary

env = Environment(loader=FileSystemLoader("app/prompts"))

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤ ===
DEFAULT_ENGINE = "huggingface"
SUPPORTED_ENGINES = {
    "huggingface": get_hugchat,
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "ollama": get_ollama_client
}

# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º ===
MAX_INPUT_TOKENS = 4000
MAX_OUTPUT_TOKENS = 1024

logger = logging.getLogger(__name__)

@lru_cache(maxsize=128)
def get_cached_external_context(query: str, lang: str = "ru") -> str:
    try:
        results = aggregated_search(query=query, source="all", lang=lang)
        return "\n\n".join(results)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return ""

def render_prompt(template_name: str, **kwargs) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º—Ç–∞."""
    template = env.get_template(template_name)
    return template.render(**kwargs)

def generate_from_prompt(template_name: str, engine: str = DEFAULT_ENGINE, include_external_context: bool = True, use_feedback=True, lang: str = "ru", **kwargs) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM —Å —à–∞–±–ª–æ–Ω–æ–º Jinja –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - template_name: –∏–º—è —à–∞–±–ª–æ–Ω–∞ .j2
        - engine: –∏–º—è LLM-–¥–≤–∏–∂–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é huggingface)
        - include_external_context: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤
        - lang: —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru)
    """
    if engine not in SUPPORTED_ENGINES:
        raise HTTPException(400, f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–≤–∏–∂–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {engine}")

    if include_external_context:
        context_query = kwargs.get("course_name") or kwargs.get("lesson_title")
        if context_query:
            kwargs["external_context"] = get_cached_external_context(context_query, lang=lang)
        else:
            kwargs["external_context"] = ""

    if use_feedback and "lesson_id" in kwargs and db:
        feedback_context = get_feedback_summary(kwargs["lesson_id"], db)
        kwargs["feedback_context"] = feedback_context
        
    prompt = render_prompt(template_name, **kwargs)
    logger.info(f"üì§ Prompt:\n{prompt}")

    llm_client = SUPPORTED_ENGINES[engine]()
    resp = llm_client.chat(prompt)
    raw = resp.wait_until_done()

    raw = raw.strip().strip("```json").strip("```")
    logger.info(f"üì• Raw JSON:\n{raw}")

    try:
        return json.loads(raw)
    except Exception:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
        logger.error(traceback.format_exc())
        raise HTTPException(500, "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –æ—Ç LLM")
