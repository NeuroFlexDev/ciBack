import os
import json
import traceback
from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy.orm import Session
from app.database.db import get_db
from app.models.course import Course
from app.models.module import Module
from app.models.lesson import Lesson
from app.models.test import Test
from app.models.task import Task

from app.models.course_structure import CourseStructure

from hugchat import hugchat
from hugchat.login import Login

router = APIRouter()


# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –º–æ–¥—É–ª—è
class ModuleTitle(BaseModel):
    title: str


def get_hugchat():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º HuggingChat."""
    HF_EMAIL = os.getenv("HF_EMAIL")
    HF_PASS = os.getenv("HF_PASS")
    if not HF_EMAIL or not HF_PASS:
        raise HTTPException(500, "‚ùå HF_EMAIL/HF_PASS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    login = Login(HF_EMAIL, HF_PASS)
    cookies = login.login(cookie_dir_path="./cookies/", save_cookies=True)
    chatbot = hugchat.ChatBot(cookies=cookies.get_dict())

    return chatbot


@router.get("/generate_modules")
def generate_modules(db: Session = Depends(get_db)):
    """
    üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π **–±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**.
    """
    try:
        chatbot = get_hugchat()

        # 1Ô∏è‚É£ **–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ**
        course = db.query(Course).order_by(Course.id.desc()).first()
        if not course:
            raise HTTPException(404, "‚ùå –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # 2Ô∏è‚É£ **–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É**
        cs = db.query(CourseStructure).first()
        if not cs:
            raise HTTPException(404, "‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        prompt = f"""
          –£ –º–µ–Ω—è –µ—Å—Ç—å –∫—É—Ä—Å "{course.name}" ({course.level}).
          –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course.description}.
          –í –Ω–µ–º {cs.sections} –º–æ–¥—É–ª–µ–π.

          –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON:
          {{
            "modules": [
              {{"title": "...", "description": "..."}}, ...
            ]
          }}
          –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äì —á–∏—Å—Ç—ã–π JSON.
        """

        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM: {prompt}")

        response_gen = chatbot.chat(prompt)
        raw = response_gen.wait_until_done()
        
        # –§–∏–∫—Å–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON
        raw = raw.strip().strip("```json").strip("```")  # –£–±–∏—Ä–∞–µ–º Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç LLM (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π): {raw}")

        try:
            modules_data = json.loads(raw)
        except:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM")
            print(traceback.format_exc())
            raise HTTPException(500, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç LLM")

        if "modules" not in modules_data:
            raise HTTPException(500, "‚ùå LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–ª—é—á 'modules'")

        return modules_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /generate_modules: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(500, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {str(e)}")


@router.post("/generate_module_lessons")
def generate_module_lessons(title: ModuleTitle, db: Session = Depends(get_db)):
    """
    üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ **–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**.
    """
    try:
        chatbot = get_hugchat()

        course = db.query(Course).order_by(Course.id.desc()).first()
        if not course:
            raise HTTPException(404, "‚ùå –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        cs = db.query(CourseStructure).first()
        if not cs:
            raise HTTPException(404, "‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        prompt = f"""
          –£ –º–µ–Ω—è –µ—Å—Ç—å –∫—É—Ä—Å "{course.name}" ({course.level}).
          –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course.description}.

          –°–µ–π—á–∞—Å –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è "{title.title}".
          –í –Ω–µ–º {cs.lessons_per_section} —É—Ä–æ–∫–æ–≤.

          –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON:
          {{
            "lessons": [{{"lesson": "...", "description": "..."}}, ...]
          }}

          –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–∫–æ–≤ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ß–ò–°–¢–´–ô JSON.
        """

        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM –¥–ª—è –º–æ–¥—É–ª—è: {title.title}")

        resp_gen = chatbot.chat(prompt)
        raw = resp_gen.wait_until_done()

        # –£–±–∏—Ä–∞–µ–º ` ```json` –∏ ` ``` `
        raw = raw.strip().strip("```json").strip("```")
        print(f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç LLM (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π): {raw}")

        try:
            data = json.loads(raw)
        except:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM")
            print(traceback.format_exc())
            raise HTTPException(500, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç LLM")

        if "lessons" not in data:
            raise HTTPException(500, "‚ùå LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–ª—é—á 'lessons'")

        return data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /generate_module_lessons: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(500, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤: {str(e)}")


import traceback

@router.post("/generate_lesson_content")
def generate_lesson_content(lesson: ModuleTitle, db: Session = Depends(get_db)):
    """
    üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ **–¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞** (—Ç–µ–æ—Ä–∏—è, –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–Ω–∏—è).
    """
    try:
        chatbot = get_hugchat()

        course = db.query(Course).order_by(Course.id.desc()).first()
        if not course:
            raise HTTPException(404, "‚ùå –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        prompt = f"""
          –£—Ä–æ–∫ "{lesson.title}" —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫—É—Ä—Å–∞ "{course.name}".
          –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course.description}.

          –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON:
          {{
            "theory": "...",
            "questions": [{{"question": "...", "answers": ["...", "...", "..."], "correct": "..."}}],
            "tasks": [{{"name": "...", "description": "..."}}]
          }}

          - **–¢–µ–æ—Ä–∏—è**: –†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
          - **–í–æ–ø—Ä–æ—Å—ã**: –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
          - **–ó–∞–¥–∞–Ω–∏—è**: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è.

          –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ –ß–ò–°–¢–´–ô JSON.
        """

        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM –¥–ª—è —É—Ä–æ–∫–∞: {lesson.title}")

        resp_gen = chatbot.chat(prompt)
        raw = resp_gen.wait_until_done()

        # –£–±–∏—Ä–∞–µ–º ` ```json` –∏ ` ``` `
        raw = raw.strip().strip("```json").strip("```")
        print(f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç LLM (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π): {raw}")

        try:
            data = json.loads(raw)
        except:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM")
            print(traceback.format_exc())
            raise HTTPException(500, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç LLM")

        return data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /generate_lesson_content: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(500, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {str(e)}")

@router.post("/save_modules")
def save_modules(data: dict, db: Session = Depends(get_db)):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤ –ë–î."""
    try:
        print("üì• –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", data)  # Debugging log
        
        course = db.query(Course).order_by(Course.id.desc()).first()
        if not course:
            raise HTTPException(404, "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        db.query(Module).filter(Module.course_id == course.id).delete()

        for mod in data["modules"]:
            module = Module(
                course_id=course.id,
                title=mod["title"],
            )
            db.add(module)
            db.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å module.id
            
            if "lessons" in mod:
                for lesson in mod["lessons"]:
                    new_lesson = Lesson(
                        module_id=module.id,
                        title=lesson.get("lesson", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                        description=lesson.get("description", ""),
                    )
                    db.add(new_lesson)

            if "tests" in mod:
                for test in mod["tests"]:
                    if "test" not in test or "description" not in test:
                        raise HTTPException(400, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test}")

                    # üõ† –†–∞–∑–±–∏—Ä–∞–µ–º `description` –Ω–∞ `answers` –∏ `correct`
                    desc = test["description"]
                    if "–í–∞—Ä–∏–∞–Ω—Ç—ã:" in desc and "(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:" in desc:
                        parts = desc.split("–í–∞—Ä–∏–∞–Ω—Ç—ã:")[1].split("(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:")
                        answers = parts[0].strip().split(", ")
                        correct = parts[1].replace(")", "").strip()
                    else:
                        raise HTTPException(400, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç–∞: {test}")

                    new_test = Test(
                        module_id=module.id,
                        question=test["test"],
                        answers=json.dumps(answers),  # JSON-–º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
                        correct_answer=correct,
                    )
                    db.add(new_test)

            if "tasks" in mod:
                for task in mod["tasks"]:
                    if "name" not in task:
                        raise HTTPException(400, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏: {task}")

                    new_task = Task(
                        module_id=module.id,
                        name=task["name"],
                        description=task.get("description", ""),
                    )
                    db.add(new_task)

        db.commit()
        return {"message": "‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
    
    except Exception as e:
        db.rollback()
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", str(e))  # Debugging line
        raise HTTPException(500, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/load_modules")
def load_modules(db: Session = Depends(get_db)):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –ë–î."""
    try:
        course = db.query(Course).order_by(Course.id.desc()).first()
        if not course:
            raise HTTPException(404, "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        modules = db.query(Module).filter(Module.course_id == course.id).all()
        if not modules:
            return {"modules": []}

        return {
            "modules": [
                {
                    "title": mod.title,
                    "lessons": [
                        {
                            "lesson": lesson.title,
                            "description": lesson.description,
                        }
                        for lesson in mod.lessons
                    ],
                    "tests": [
                        {
                            "test": test.question,
                            "answers": json.loads(test.answers),
                            "correct": test.correct_answer,
                        }
                        for test in mod.tests
                    ],
                    "tasks": [
                        {
                            "name": task.name,
                            "description": task.description,
                        }
                        for task in mod.tasks
                    ],
                }
                for mod in modules
            ]
        }
    
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:", str(e))  # Debugging
        raise HTTPException(500, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {str(e)}")